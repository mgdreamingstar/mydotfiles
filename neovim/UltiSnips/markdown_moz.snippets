priority 1

#pre_expand "del snip.buffer[snip.line]; snip.cursor.set(snip.line, 0)"
snippet '([#\s]*)(\d)ha' "header 1" r 
`!p
import vim, re
line = vim.eval('getline(".")')
no_h_line = re.match('([#\s]*)(.*)',line).group(2)
if not snip.c:
	snip.rv = "#"*int(match.group(2)) + ' ' + no_h_line	
`
endsnippet

snippet lnk "Link to something"
[${1:${VISUAL:Text}}](${3:http://${2:www.url.com}})$0
endsnippet

snippet img "Image"
![${1:pic alt}](${2:path}${3/.+/ "/}${3:opt title}${3/.+/"/})$0
endsnippet

snippet ci "Inline Code" i
\`$1\`$0
endsnippet

snippet cb "Codeblock" b
\`\`\`
$1
\`\`\`
$0
endsnippet

snippet rel "Reference Link"
[${1:${VISUAL:Text}}][${2:id}]$0

[$2]:${4:http://${3:www.url.com}} "${5:$4}"
endsnippet

snippet fnt "Footnote"
[^${1:${VISUAL:Footnote}}]$0

[^$1]:${2:Text}
endsnippet

# Math
snippet mk "Math" wA
$${1}$`!p  # if right side of $$ is not [,.?- ] then add a ' '.
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet am "Math" wA
$$
$1
$$ $0
endsnippet

snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

snippet sr "^2" iA
^2
endsnippet

snippet cb "^3" iA
^3
endsnippet

snippet td "to the ... power" iA
^{$1}$0
endsnippet

snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet <= "leq" iA
\le 
endsnippet

snippet >= "geq" iA
\ge 
endsnippet

snippet xnn "xn" iA
x_{n}
endsnippet

snippet ynn "yn" iA
y_{n}
endsnippet

snippet xii "xi" iA
x_{i}
endsnippet

snippet yii "yi" iA
y_{i}
endsnippet

snippet xjj "xj" iA
x_{j}
endsnippet

snippet yjj "yj" iA
y_{j}
endsnippet

snippet xp1 "x" iA
x_{n+1}
endsnippet

snippet xmm "x" iA
x_{m}
endsnippet

snippet nabl "nabla" iA
\nabla 
endsnippet

snippet xx "cross" iA
\times 
endsnippet

snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

snippet invs "inverse" iA
^{-1}
endsnippet

snippet compl "complement" iA
^{c}
endsnippet

snippet DD "delta" iA
\Delta 
endsnippet

snippet ~~ "~" iA
\sim 
endsnippet

snippet tt "text" iA
\text{$1}$0
endsnippet

snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

snippet "(\\[a-zA-Z]+)hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet '([a-zA-Z])tr' "" rA
`!p snip.rv = match.group(1)`^{T}
endsnippet

snippet "til" "til" riA
\tilde{$1}$0
endsnippet

snippet 'udl' "underline" rA
\underline{$1} $0
endsnippet

## Fraction
snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

## Subscript
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet '([A-Za-z]})([\dij])' "auto subscript3" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

## Operation
snippet sa "sum" w
\sum_{n=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

snippet sum "sum" wA
\sum 
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

